// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.DataAccess;

namespace WeatherApp.DataAccess.Migrations
{
    [DbContext(typeof(WeatherAppDbContext))]
    partial class WeatherAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApp.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lat")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Long")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Lat = "42.002",
                            Long = "21.5122",
                            Name = "Skopje"
                        });
                });

            modelBuilder.Entity("WeatherApp.Domain.Models.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Precipitation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TemperatureC")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("TemperatureMaxC")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("TemperatureMinC")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("WeatherDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("int");

                    b.Property<string>("WindSpeed")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("WeekDayId");

                    b.ToTable("WeatherData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Date = new DateTime(2022, 4, 7, 14, 10, 47, 721, DateTimeKind.Local).AddTicks(6104),
                            Icon = "09d",
                            Language = "eng",
                            Precipitation = "48",
                            TemperatureC = 13,
                            TemperatureMaxC = 13,
                            TemperatureMinC = 5,
                            WeatherDescription = "Light Rain",
                            WeekDayId = 1,
                            WindSpeed = "5.93m/s"
                        });
                });

            modelBuilder.Entity("WeatherApp.Domain.Models.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MkName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EngName = "Monday",
                            MkName = "Понеделник"
                        },
                        new
                        {
                            Id = 2,
                            EngName = "Tuesday",
                            MkName = "Вторник"
                        },
                        new
                        {
                            Id = 3,
                            EngName = "Wednesday",
                            MkName = "Среда"
                        },
                        new
                        {
                            Id = 4,
                            EngName = "Thursday",
                            MkName = "Четврток"
                        },
                        new
                        {
                            Id = 5,
                            EngName = "Friday",
                            MkName = "Петок"
                        },
                        new
                        {
                            Id = 6,
                            EngName = "Saturday",
                            MkName = "Сабота"
                        },
                        new
                        {
                            Id = 7,
                            EngName = "Sunday",
                            MkName = "Недела"
                        });
                });

            modelBuilder.Entity("WeatherApp.Domain.Models.WeatherData", b =>
                {
                    b.HasOne("WeatherApp.Domain.Models.City", "City")
                        .WithMany("WeatherData")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApp.Domain.Models.WeekDay", "WeekDay")
                        .WithMany("WeatherData")
                        .HasForeignKey("WeekDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("WeatherApp.Domain.Models.City", b =>
                {
                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("WeatherApp.Domain.Models.WeekDay", b =>
                {
                    b.Navigation("WeatherData");
                });
#pragma warning restore 612, 618
        }
    }
}
